// Derived from:
// https://raw.githubusercontent.com/aspnet/KestrelHttpServer/64127e6c766b221cf147383c16079d3b7aad2ded/test/Kestrel.Core.Tests/HuffmanTests.cs

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Generic;
using System.IO;
using System.Text;
using Xunit;
using Huff = SourceCode.Clay.Algorithms.HuffmanArray;

namespace SourceCode.Clay.Algorithms.Tests
{
    public class HuffmanTests
    {
        public static readonly TheoryData<byte[], byte[]> _validData = new TheoryData<byte[], byte[]>
        {
            // Single 5-bit symbol
            { new byte[] { 0x07 }, Encoding.ASCII.GetBytes("0") },
            // Single 6-bit symbol
            { new byte[] { 0x57 }, Encoding.ASCII.GetBytes("%") },
            // Single 7-bit symbol
            { new byte[] { 0xb9 }, Encoding.ASCII.GetBytes(":") },
            // Single 8-bit symbol
            { new byte[] { 0xf8 }, Encoding.ASCII.GetBytes("&") },
            // Single 10-bit symbol
            { new byte[] { 0xfe, 0x3f }, Encoding.ASCII.GetBytes("!") },
            // Single 11-bit symbol
            { new byte[] { 0xff, 0x7f }, Encoding.ASCII.GetBytes("+") },
            // Single 12-bit symbol
            { new byte[] { 0xff, 0xaf }, Encoding.ASCII.GetBytes("#") },
            // Single 13-bit symbol
            { new byte[] { 0xff, 0xcf }, Encoding.ASCII.GetBytes("$") },
            // Single 14-bit symbol
            { new byte[] { 0xff, 0xf3 }, Encoding.ASCII.GetBytes("^") },
            // Single 15-bit symbol
            { new byte[] { 0xff, 0xf9 }, Encoding.ASCII.GetBytes("<") },
            // Single 19-bit symbol
            { new byte[] { 0xff, 0xfe, 0x1f }, Encoding.ASCII.GetBytes("\\") },
            // Single 20-bit symbol
            { new byte[] { 0xff, 0xfe, 0x6f }, new byte[] { 0x80 } },
            // Single 21-bit symbol
            { new byte[] { 0xff, 0xfe, 0xe7 }, new byte[] { 0x99 } },
            // Single 22-bit symbol
            { new byte[] { 0xff, 0xff, 0x4b }, new byte[] { 0x81 } },
            // Single 23-bit symbol
            { new byte[] { 0xff, 0xff, 0xb1 }, new byte[] { 0x01 } },
            // Single 24-bit symbol
            { new byte[] { 0xff, 0xff, 0xea }, new byte[] { 0x09 } },
            // Single 25-bit symbol
            { new byte[] { 0xff, 0xff, 0xf6, 0x7f }, new byte[] { 0xc7 } },
            // Single 26-bit symbol
            { new byte[] { 0xff, 0xff, 0xf8, 0x3f }, new byte[] { 0xc0 } },
            // Single 27-bit symbol
            { new byte[] { 0xff, 0xff, 0xfb, 0xdf }, new byte[] { 0xcb } },
            // Single 28-bit symbol
            { new byte[] { 0xff, 0xff, 0xfe, 0x2f }, new byte[] { 0x02 } },
            // Single 30-bit symbol
            { new byte[] { 0xff, 0xff, 0xff, 0xf3 }, new byte[] { 0x0a } },

            //               h      e         l          l      o         *
            { new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1111 }, Encoding.ASCII.GetBytes("hello") },

            //               h      e         l          l      o         <space>    W           O          R            L            D     \                              >                *
            { new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0101, 0b00_111001, 0b0_1101010, 0b1101101_1, 0b100111_10, 0b11111_111, 0b11111111, 0b11110000, 0b11111111, 0b1011_1111 }, Encoding.ASCII.GetBytes(@"hello WORLD\>") },

            // Sequences that uncovered errors
            { new byte[] { 0xb6, 0xb9, 0xac, 0x1c, 0x85, 0x58, 0xd5, 0x20, 0xa4, 0xb6, 0xc2, 0xad, 0x61, 0x7b, 0x5a, 0x54, 0x25, 0x1f }, Encoding.ASCII.GetBytes("upgrade-insecure-requests") },
            { new byte[] { 0xfe, 0x53 }, Encoding.ASCII.GetBytes("\"t") },
            { new byte[] { 0xb9, 0x49, 0x53, 0x39, 0xe4, 0xb8, 0xa6, 0x2c, 0x1b, 0xff }, Encoding.ASCII.GetBytes(":method: GET") }
        };

        [Theory]
        [MemberData(nameof(_validData))]
        public void HuffmanDecodeArray(byte[] encoded, byte[] expected)
        {
            var dst = new byte[expected.Length];
            Assert.Equal(expected.Length, Huff.Decode(encoded, 0, encoded.Length, dst));
            Assert.Equal(expected, dst);
        }

        public static readonly TheoryData<byte[]> _longPaddingData = new TheoryData<byte[]>
        {
            //             h      e         l          l      o         *
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1111, 0b11111111 },

            // '&' (8 bits) + 8 bit padding
            new byte[] { 0xf8, 0xff },

            // ':' (7 bits) + 9 bit padding
            new byte[] { 0xb9, 0xff }
        };

        [Theory]
        [MemberData(nameof(_longPaddingData))]
        public void ThrowsOnPaddingLongerThanSevenBits(byte[] encoded)
        {
            var exception = Assert.Throws<HuffmanDecodingException>(() => Huff.Decode(encoded, 0, encoded.Length, new byte[encoded.Length * 2]));
            //Assert.Equal(CoreStrings.HPackHuffmanErrorIncomplete, exception.Message);
        }

        public static readonly TheoryData<byte[]> _eosData = new TheoryData<byte[]>
        {
            // EOS
            new byte[] { 0xff, 0xff, 0xff, 0xff },
            // '&' + EOS + '0'
            new byte[] { 0xf8, 0xff, 0xff, 0xff, 0xfc, 0x1f }
        };

        [Theory]
        [MemberData(nameof(_eosData))]
        public void ThrowsOnEOS(byte[] encoded)
        {
            var exception = Assert.Throws<HuffmanDecodingException>(() => Huff.Decode(encoded, 0, encoded.Length, new byte[encoded.Length * 2]));
            //Assert.Equal(CoreStrings.HPackHuffmanErrorEOS, exception.Message);
        }

        [Fact]
        public void HuffmanDecodeHeaders()
        {
            using (var reader = File.OpenText(@".\HuffmanHeaders.txt"))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    var expected = Encoding.ASCII.GetBytes(line);

                    var dst = new byte[expected.Length];
                    var encoded = Encode(line);
                    Assert.Equal(expected.Length, Huff.Decode(encoded, 0, encoded.Length, dst));
                    Assert.Equal(expected, dst);
                }
            }
        }

        [Fact]
        public void ThrowsOnDestinationBufferTooSmall()
        {
            //                           h      e         l          l      o         *
            var encoded = new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1111 };
            var exception = Assert.Throws<HuffmanDecodingException>(() => Huff.Decode(encoded, 0, encoded.Length, new byte[encoded.Length]));
            //Assert.Equal(CoreStrings.HPackHuffmanErrorDestinationTooSmall, exception.Message);
        }

        public static readonly TheoryData<byte[]> _incompleteSymbolData = new TheoryData<byte[]>
        {
            //             h      e         l          l      o (incomplete)
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0 },

            // Non-zero padding will be seen as incomplete symbol
            //             h      e         l          l      o         *
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0000 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0001 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0010 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0011 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0100 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0101 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0110 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_0111 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1000 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1001 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1010 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1011 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1100 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1101 },
            new byte[] { 0b100111_00, 0b101_10100, 0b0_101000_0, 0b0111_1110 }
        };

        [Theory]
        [MemberData(nameof(_incompleteSymbolData))]
        public void ThrowsOnIncompleteSymbol(byte[] encoded)
        {
            var exception = Assert.Throws<HuffmanDecodingException>(() => Huff.Decode(encoded, 0, encoded.Length, new byte[encoded.Length * 2]));
            //Assert.Equal(CoreStrings.HPackHuffmanErrorIncomplete, exception.Message);
        }

        [Theory]
        [MemberData(nameof(HuffmanData))]
        public void HuffmanEncode(int code, uint expectedEncoded, int expectedBitLength)
        {
            var (encoded, bitLength) = Huff.Encode(code);
            Assert.Equal(expectedEncoded, encoded);
            Assert.Equal(expectedBitLength, bitLength);
        }

        [Theory]
        [MemberData(nameof(HuffmanData))]
        public void HuffmanDecode(int code, uint encoded, int bitLength)
        {
            Assert.Equal(code, Huff.Decode(encoded, bitLength, out var decodedBits));
            Assert.Equal(bitLength, decodedBits);
        }

        [Theory]
        [MemberData(nameof(HuffmanData))]
        public void HuffmanEncodeDecode(
            int code,
            // Suppresses the warning about an unused theory parameter because
            // this test shares data with other methods
#pragma warning disable xUnit1026
            uint encoded,
#pragma warning restore xUnit1026
            int bitLength)
        {
            Assert.Equal(code, Huff.Decode(Huff.Encode(code).encoded, bitLength, out var decodedBits));
            Assert.Equal(bitLength, decodedBits);
        }

        public static TheoryData<int, uint, int> HuffmanData
        {
            get
            {
                var data = new TheoryData<int, uint, int>
                {
                    { 000, 0b11111111_11000000_00000000_00000000, 13 },
                    { 001, 0b11111111_11111111_10110000_00000000, 23 },
                    { 002, 0b11111111_11111111_11111110_00100000, 28 },
                    { 003, 0b11111111_11111111_11111110_00110000, 28 },
                    { 004, 0b11111111_11111111_11111110_01000000, 28 },
                    { 005, 0b11111111_11111111_11111110_01010000, 28 },
                    { 006, 0b11111111_11111111_11111110_01100000, 28 },
                    { 007, 0b11111111_11111111_11111110_01110000, 28 },
                    { 008, 0b11111111_11111111_11111110_10000000, 28 },
                    { 009, 0b11111111_11111111_11101010_00000000, 24 },
                    { 010, 0b11111111_11111111_11111111_11110000, 30 },
                    { 011, 0b11111111_11111111_11111110_10010000, 28 },
                    { 012, 0b11111111_11111111_11111110_10100000, 28 },
                    { 013, 0b11111111_11111111_11111111_11110100, 30 },
                    { 014, 0b11111111_11111111_11111110_10110000, 28 },
                    { 015, 0b11111111_11111111_11111110_11000000, 28 },
                    { 016, 0b11111111_11111111_11111110_11010000, 28 },
                    { 017, 0b11111111_11111111_11111110_11100000, 28 },
                    { 018, 0b11111111_11111111_11111110_11110000, 28 },
                    { 019, 0b11111111_11111111_11111111_00000000, 28 },
                    { 020, 0b11111111_11111111_11111111_00010000, 28 },
                    { 021, 0b11111111_11111111_11111111_00100000, 28 },
                    { 022, 0b11111111_11111111_11111111_11111000, 30 },
                    { 023, 0b11111111_11111111_11111111_00110000, 28 },
                    { 024, 0b11111111_11111111_11111111_01000000, 28 },
                    { 025, 0b11111111_11111111_11111111_01010000, 28 },
                    { 026, 0b11111111_11111111_11111111_01100000, 28 },
                    { 027, 0b11111111_11111111_11111111_01110000, 28 },
                    { 028, 0b11111111_11111111_11111111_10000000, 28 },
                    { 029, 0b11111111_11111111_11111111_10010000, 28 },
                    { 030, 0b11111111_11111111_11111111_10100000, 28 },
                    { 031, 0b11111111_11111111_11111111_10110000, 28 },
                    { 032, 0b01010000_00000000_00000000_00000000, 6 },
                    { 033, 0b11111110_00000000_00000000_00000000, 10 },
                    { 034, 0b11111110_01000000_00000000_00000000, 10 },
                    { 035, 0b11111111_10100000_00000000_00000000, 12 },
                    { 036, 0b11111111_11001000_00000000_00000000, 13 },
                    { 037, 0b01010100_00000000_00000000_00000000, 6 },
                    { 038, 0b11111000_00000000_00000000_00000000, 8 },
                    { 039, 0b11111111_01000000_00000000_00000000, 11 },
                    { 040, 0b11111110_10000000_00000000_00000000, 10 },
                    { 041, 0b11111110_11000000_00000000_00000000, 10 },
                    { 042, 0b11111001_00000000_00000000_00000000, 8 },
                    { 043, 0b11111111_01100000_00000000_00000000, 11 },
                    { 044, 0b11111010_00000000_00000000_00000000, 8 },
                    { 045, 0b01011000_00000000_00000000_00000000, 6 },
                    { 046, 0b01011100_00000000_00000000_00000000, 6 },
                    { 047, 0b01100000_00000000_00000000_00000000, 6 },
                    { 048, 0b00000000_00000000_00000000_00000000, 5 },
                    { 049, 0b00001000_00000000_00000000_00000000, 5 },
                    { 050, 0b00010000_00000000_00000000_00000000, 5 },
                    { 051, 0b01100100_00000000_00000000_00000000, 6 },
                    { 052, 0b01101000_00000000_00000000_00000000, 6 },
                    { 053, 0b01101100_00000000_00000000_00000000, 6 },
                    { 054, 0b01110000_00000000_00000000_00000000, 6 },
                    { 055, 0b01110100_00000000_00000000_00000000, 6 },
                    { 056, 0b01111000_00000000_00000000_00000000, 6 },
                    { 057, 0b01111100_00000000_00000000_00000000, 6 },
                    { 058, 0b10111000_00000000_00000000_00000000, 7 },
                    { 059, 0b11111011_00000000_00000000_00000000, 8 },
                    { 060, 0b11111111_11111000_00000000_00000000, 15 },
                    { 061, 0b10000000_00000000_00000000_00000000, 6 },
                    { 062, 0b11111111_10110000_00000000_00000000, 12 },
                    { 063, 0b11111111_00000000_00000000_00000000, 10 },
                    { 064, 0b11111111_11010000_00000000_00000000, 13 },
                    { 065, 0b10000100_00000000_00000000_00000000, 6 },
                    { 066, 0b10111010_00000000_00000000_00000000, 7 },
                    { 067, 0b10111100_00000000_00000000_00000000, 7 },
                    { 068, 0b10111110_00000000_00000000_00000000, 7 },
                    { 069, 0b11000000_00000000_00000000_00000000, 7 },
                    { 070, 0b11000010_00000000_00000000_00000000, 7 },
                    { 071, 0b11000100_00000000_00000000_00000000, 7 },
                    { 072, 0b11000110_00000000_00000000_00000000, 7 },
                    { 073, 0b11001000_00000000_00000000_00000000, 7 },
                    { 074, 0b11001010_00000000_00000000_00000000, 7 },
                    { 075, 0b11001100_00000000_00000000_00000000, 7 },
                    { 076, 0b11001110_00000000_00000000_00000000, 7 },
                    { 077, 0b11010000_00000000_00000000_00000000, 7 },
                    { 078, 0b11010010_00000000_00000000_00000000, 7 },
                    { 079, 0b11010100_00000000_00000000_00000000, 7 },
                    { 080, 0b11010110_00000000_00000000_00000000, 7 },
                    { 081, 0b11011000_00000000_00000000_00000000, 7 },
                    { 082, 0b11011010_00000000_00000000_00000000, 7 },
                    { 083, 0b11011100_00000000_00000000_00000000, 7 },
                    { 084, 0b11011110_00000000_00000000_00000000, 7 },
                    { 085, 0b11100000_00000000_00000000_00000000, 7 },
                    { 086, 0b11100010_00000000_00000000_00000000, 7 },
                    { 087, 0b11100100_00000000_00000000_00000000, 7 },
                    { 088, 0b11111100_00000000_00000000_00000000, 8 },
                    { 089, 0b11100110_00000000_00000000_00000000, 7 },
                    { 090, 0b11111101_00000000_00000000_00000000, 8 },
                    { 091, 0b11111111_11011000_00000000_00000000, 13 },
                    { 092, 0b11111111_11111110_00000000_00000000, 19 },
                    { 093, 0b11111111_11100000_00000000_00000000, 13 },
                    { 094, 0b11111111_11110000_00000000_00000000, 14 },
                    { 095, 0b10001000_00000000_00000000_00000000, 6 },
                    { 096, 0b11111111_11111010_00000000_00000000, 15 },
                    { 097, 0b00011000_00000000_00000000_00000000, 5 },
                    { 098, 0b10001100_00000000_00000000_00000000, 6 },
                    { 099, 0b00100000_00000000_00000000_00000000, 5 },
                    { 100, 0b10010000_00000000_00000000_00000000, 6 },
                    { 101, 0b00101000_00000000_00000000_00000000, 5 },
                    { 102, 0b10010100_00000000_00000000_00000000, 6 },
                    { 103, 0b10011000_00000000_00000000_00000000, 6 },
                    { 104, 0b10011100_00000000_00000000_00000000, 6 },
                    { 105, 0b00110000_00000000_00000000_00000000, 5 },
                    { 106, 0b11101000_00000000_00000000_00000000, 7 },
                    { 107, 0b11101010_00000000_00000000_00000000, 7 },
                    { 108, 0b10100000_00000000_00000000_00000000, 6 },
                    { 109, 0b10100100_00000000_00000000_00000000, 6 },
                    { 110, 0b10101000_00000000_00000000_00000000, 6 },
                    { 111, 0b00111000_00000000_00000000_00000000, 5 },
                    { 112, 0b10101100_00000000_00000000_00000000, 6 },
                    { 113, 0b11101100_00000000_00000000_00000000, 7 },
                    { 114, 0b10110000_00000000_00000000_00000000, 6 },
                    { 115, 0b01000000_00000000_00000000_00000000, 5 },
                    { 116, 0b01001000_00000000_00000000_00000000, 5 },
                    { 117, 0b10110100_00000000_00000000_00000000, 6 },
                    { 118, 0b11101110_00000000_00000000_00000000, 7 },
                    { 119, 0b11110000_00000000_00000000_00000000, 7 },
                    { 120, 0b11110010_00000000_00000000_00000000, 7 },
                    { 121, 0b11110100_00000000_00000000_00000000, 7 },
                    { 122, 0b11110110_00000000_00000000_00000000, 7 },
                    { 123, 0b11111111_11111100_00000000_00000000, 15 },
                    { 124, 0b11111111_10000000_00000000_00000000, 11 },
                    { 125, 0b11111111_11110100_00000000_00000000, 14 },
                    { 126, 0b11111111_11101000_00000000_00000000, 13 },
                    { 127, 0b11111111_11111111_11111111_11000000, 28 },
                    { 128, 0b11111111_11111110_01100000_00000000, 20 },
                    { 129, 0b11111111_11111111_01001000_00000000, 22 },
                    { 130, 0b11111111_11111110_01110000_00000000, 20 },
                    { 131, 0b11111111_11111110_10000000_00000000, 20 },
                    { 132, 0b11111111_11111111_01001100_00000000, 22 },
                    { 133, 0b11111111_11111111_01010000_00000000, 22 },
                    { 134, 0b11111111_11111111_01010100_00000000, 22 },
                    { 135, 0b11111111_11111111_10110010_00000000, 23 },
                    { 136, 0b11111111_11111111_01011000_00000000, 22 },
                    { 137, 0b11111111_11111111_10110100_00000000, 23 },
                    { 138, 0b11111111_11111111_10110110_00000000, 23 },
                    { 139, 0b11111111_11111111_10111000_00000000, 23 },
                    { 140, 0b11111111_11111111_10111010_00000000, 23 },
                    { 141, 0b11111111_11111111_10111100_00000000, 23 },
                    { 142, 0b11111111_11111111_11101011_00000000, 24 },
                    { 143, 0b11111111_11111111_10111110_00000000, 23 },
                    { 144, 0b11111111_11111111_11101100_00000000, 24 },
                    { 145, 0b11111111_11111111_11101101_00000000, 24 },
                    { 146, 0b11111111_11111111_01011100_00000000, 22 },
                    { 147, 0b11111111_11111111_11000000_00000000, 23 },
                    { 148, 0b11111111_11111111_11101110_00000000, 24 },
                    { 149, 0b11111111_11111111_11000010_00000000, 23 },
                    { 150, 0b11111111_11111111_11000100_00000000, 23 },
                    { 151, 0b11111111_11111111_11000110_00000000, 23 },
                    { 152, 0b11111111_11111111_11001000_00000000, 23 },
                    { 153, 0b11111111_11111110_11100000_00000000, 21 },
                    { 154, 0b11111111_11111111_01100000_00000000, 22 },
                    { 155, 0b11111111_11111111_11001010_00000000, 23 },
                    { 156, 0b11111111_11111111_01100100_00000000, 22 },
                    { 157, 0b11111111_11111111_11001100_00000000, 23 },
                    { 158, 0b11111111_11111111_11001110_00000000, 23 },
                    { 159, 0b11111111_11111111_11101111_00000000, 24 },
                    { 160, 0b11111111_11111111_01101000_00000000, 22 },
                    { 161, 0b11111111_11111110_11101000_00000000, 21 },
                    { 162, 0b11111111_11111110_10010000_00000000, 20 },
                    { 163, 0b11111111_11111111_01101100_00000000, 22 },
                    { 164, 0b11111111_11111111_01110000_00000000, 22 },
                    { 165, 0b11111111_11111111_11010000_00000000, 23 },
                    { 166, 0b11111111_11111111_11010010_00000000, 23 },
                    { 167, 0b11111111_11111110_11110000_00000000, 21 },
                    { 168, 0b11111111_11111111_11010100_00000000, 23 },
                    { 169, 0b11111111_11111111_01110100_00000000, 22 },
                    { 170, 0b11111111_11111111_01111000_00000000, 22 },
                    { 171, 0b11111111_11111111_11110000_00000000, 24 },
                    { 172, 0b11111111_11111110_11111000_00000000, 21 },
                    { 173, 0b11111111_11111111_01111100_00000000, 22 },
                    { 174, 0b11111111_11111111_11010110_00000000, 23 },
                    { 175, 0b11111111_11111111_11011000_00000000, 23 },
                    { 176, 0b11111111_11111111_00000000_00000000, 21 },
                    { 177, 0b11111111_11111111_00001000_00000000, 21 },
                    { 178, 0b11111111_11111111_10000000_00000000, 22 },
                    { 179, 0b11111111_11111111_00010000_00000000, 21 },
                    { 180, 0b11111111_11111111_11011010_00000000, 23 },
                    { 181, 0b11111111_11111111_10000100_00000000, 22 },
                    { 182, 0b11111111_11111111_11011100_00000000, 23 },
                    { 183, 0b11111111_11111111_11011110_00000000, 23 },
                    { 184, 0b11111111_11111110_10100000_00000000, 20 },
                    { 185, 0b11111111_11111111_10001000_00000000, 22 },
                    { 186, 0b11111111_11111111_10001100_00000000, 22 },
                    { 187, 0b11111111_11111111_10010000_00000000, 22 },
                    { 188, 0b11111111_11111111_11100000_00000000, 23 },
                    { 189, 0b11111111_11111111_10010100_00000000, 22 },
                    { 190, 0b11111111_11111111_10011000_00000000, 22 },
                    { 191, 0b11111111_11111111_11100010_00000000, 23 },
                    { 192, 0b11111111_11111111_11111000_00000000, 26 },
                    { 193, 0b11111111_11111111_11111000_01000000, 26 },
                    { 194, 0b11111111_11111110_10110000_00000000, 20 },
                    { 195, 0b11111111_11111110_00100000_00000000, 19 },
                    { 196, 0b11111111_11111111_10011100_00000000, 22 },
                    { 197, 0b11111111_11111111_11100100_00000000, 23 },
                    { 198, 0b11111111_11111111_10100000_00000000, 22 },
                    { 199, 0b11111111_11111111_11110110_00000000, 25 },
                    { 200, 0b11111111_11111111_11111000_10000000, 26 },
                    { 201, 0b11111111_11111111_11111000_11000000, 26 },
                    { 202, 0b11111111_11111111_11111001_00000000, 26 },
                    { 203, 0b11111111_11111111_11111011_11000000, 27 },
                    { 204, 0b11111111_11111111_11111011_11100000, 27 },
                    { 205, 0b11111111_11111111_11111001_01000000, 26 },
                    { 206, 0b11111111_11111111_11110001_00000000, 24 },
                    { 207, 0b11111111_11111111_11110110_10000000, 25 },
                    { 208, 0b11111111_11111110_01000000_00000000, 19 },
                    { 209, 0b11111111_11111111_00011000_00000000, 21 },
                    { 210, 0b11111111_11111111_11111001_10000000, 26 },
                    { 211, 0b11111111_11111111_11111100_00000000, 27 },
                    { 212, 0b11111111_11111111_11111100_00100000, 27 },
                    { 213, 0b11111111_11111111_11111001_11000000, 26 },
                    { 214, 0b11111111_11111111_11111100_01000000, 27 },
                    { 215, 0b11111111_11111111_11110010_00000000, 24 },
                    { 216, 0b11111111_11111111_00100000_00000000, 21 },
                    { 217, 0b11111111_11111111_00101000_00000000, 21 },
                    { 218, 0b11111111_11111111_11111010_00000000, 26 },
                    { 219, 0b11111111_11111111_11111010_01000000, 26 },
                    { 220, 0b11111111_11111111_11111111_11010000, 28 },
                    { 221, 0b11111111_11111111_11111100_01100000, 27 },
                    { 222, 0b11111111_11111111_11111100_10000000, 27 },
                    { 223, 0b11111111_11111111_11111100_10100000, 27 },
                    { 224, 0b11111111_11111110_11000000_00000000, 20 },
                    { 225, 0b11111111_11111111_11110011_00000000, 24 },
                    { 226, 0b11111111_11111110_11010000_00000000, 20 },
                    { 227, 0b11111111_11111111_00110000_00000000, 21 },
                    { 228, 0b11111111_11111111_10100100_00000000, 22 },
                    { 229, 0b11111111_11111111_00111000_00000000, 21 },
                    { 230, 0b11111111_11111111_01000000_00000000, 21 },
                    { 231, 0b11111111_11111111_11100110_00000000, 23 },
                    { 232, 0b11111111_11111111_10101000_00000000, 22 },
                    { 233, 0b11111111_11111111_10101100_00000000, 22 },
                    { 234, 0b11111111_11111111_11110111_00000000, 25 },
                    { 235, 0b11111111_11111111_11110111_10000000, 25 },
                    { 236, 0b11111111_11111111_11110100_00000000, 24 },
                    { 237, 0b11111111_11111111_11110101_00000000, 24 },
                    { 238, 0b11111111_11111111_11111010_10000000, 26 },
                    { 239, 0b11111111_11111111_11101000_00000000, 23 },
                    { 240, 0b11111111_11111111_11111010_11000000, 26 },
                    { 241, 0b11111111_11111111_11111100_11000000, 27 },
                    { 242, 0b11111111_11111111_11111011_00000000, 26 },
                    { 243, 0b11111111_11111111_11111011_01000000, 26 },
                    { 244, 0b11111111_11111111_11111100_11100000, 27 },
                    { 245, 0b11111111_11111111_11111101_00000000, 27 },
                    { 246, 0b11111111_11111111_11111101_00100000, 27 },
                    { 247, 0b11111111_11111111_11111101_01000000, 27 },
                    { 248, 0b11111111_11111111_11111101_01100000, 27 },
                    { 249, 0b11111111_11111111_11111111_11100000, 28 },
                    { 250, 0b11111111_11111111_11111101_10000000, 27 },
                    { 251, 0b11111111_11111111_11111101_10100000, 27 },
                    { 252, 0b11111111_11111111_11111101_11000000, 27 },
                    { 253, 0b11111111_11111111_11111101_11100000, 27 },
                    { 254, 0b11111111_11111111_11111110_00000000, 27 },
                    { 255, 0b11111111_11111111_11111011_10000000, 26 },
                    { 256, 0b11111111_11111111_11111111_11111100, 30 }
                };

                return data;
            }
        }

        private static byte[] Encode(string value)
        {
            var encodedBytes = new List<byte>();
            byte workingByte = 0;
            var bitsLeftInByte = 8;

            for (var i = 0; i < value.Length; i++)
            {
                var character = value[i];
                var encoded = Huff.Encode(character);

                while (encoded.bitLength > 0)
                {
                    var bitsToWrite = bitsLeftInByte;
                    workingByte |= (byte)(encoded.encoded >> 24 + (8 - bitsToWrite));
                    if (encoded.bitLength >= bitsLeftInByte)
                    {
                        encoded.encoded <<= bitsLeftInByte;

                        encodedBytes.Add(workingByte);
                        workingByte = 0;
                        bitsLeftInByte = 8;
                    }
                    else
                    {
                        bitsLeftInByte -= encoded.bitLength;
                    }

                    encoded.bitLength -= bitsToWrite;
                }
            }

            if (bitsLeftInByte < 8)
            {
                // Pad remaning bits with 1s
                workingByte |= (byte)((0x1 << bitsLeftInByte) - 1);
                encodedBytes.Add(workingByte);
            }

            return encodedBytes.ToArray();
        }
    }
}